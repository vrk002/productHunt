"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cliSeeder = void 0;
const commandLineArgs = require("command-line-args");
const ts_node_1 = require("ts-node");
const path_1 = require("path");
const mongo_seeding_1 = require("mongo-seeding");
const options_1 = require("./options");
const help_1 = require("./help");
class CliSeeder {
    constructor() {
        this.run = () => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            let options;
            try {
                options = commandLineArgs(options_1.cliOptions);
            }
            catch (err) {
                return this.printErrorAndExit(err);
            }
            if ((0, help_1.shouldShowHelp)(options)) {
                (0, help_1.showHelp)();
                return;
            }
            try {
                (0, options_1.validateOptions)(options);
            }
            catch (err) {
                return this.printErrorAndExit(err);
            }
            const config = (0, options_1.createConfigFromOptions)(options);
            this.useCliSpecificOptions(config.cli);
            const seeder = new mongo_seeding_1.Seeder(config.seeder);
            try {
                const collections = seeder.readCollectionsFromPath((0, path_1.resolve)((_b = (_a = config.cli) === null || _a === void 0 ? void 0 : _a.dataPath) !== null && _b !== void 0 ? _b : './'), config.collectionReading);
                yield seeder.import(collections);
            }
            catch (err) {
                return this.printErrorAndExit(err);
            }
            process.exit(0);
        });
        this.printErrorAndExit = (err) => {
            console.error(`Error ${err.name}: ${err.message}`);
            process.exit(1);
        };
    }
    useCliSpecificOptions(options = {}) {
        if (!options.silent) {
            // Enable debug output for Mongo Seeding
            process.env.DEBUG = 'mongo-seeding';
        }
        (0, ts_node_1.register)({
            transpileOnly: options.transpileOnly,
            compiler: require.resolve('typescript', { paths: [__dirname] }),
        });
    }
}
exports.cliSeeder = new CliSeeder();
//# sourceMappingURL=index.js.map